# main.py

from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import FileResponse, StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import Literal
import os
import json
import asyncio

from backend.graph import app_graph

app = FastAPI(
    title="Auto Slide Deck Generator API",
    description="An API to generate PowerPoint presentations from a topic using LLMs and web search."
)

# Add CORS middleware to allow frontend connections
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

TemplateName = Literal[
    "Minimalist_Dark",
    "Business_Corporate",
    "Education_Creative",
    "Historical_Vintage",
    "Technology_Futuristic",
    "Environmental_Natural"
]

class GenerationRequest(BaseModel):
    topic: str
    presenter_name: str = Field(default="Generated by AI", description="Name of the presenter to be shown on the title slide.")
    template_name: TemplateName = Field(default="Minimalist_Dark", description="The design theme to use for the presentation.")

# --- NEW: Streaming Endpoint ---
@app.post("/generate-and-stream/", tags=["Presentation"])
async def generate_and_stream(request: GenerationRequest):
    """
    Runs the generation graph and streams real-time updates to the client.
    Returns the final presentation path upon completion.
    """
    if not request.topic:
        raise HTTPException(status_code=400, detail="Topic cannot be empty.")

    inputs = {
        "topic": request.topic,
        "presenter_name": request.presenter_name,
        "template_name": request.template_name,
    }

    async def stream_generator():
        final_path = ""
        try:
            # Use the .stream() method to get real-time updates from the graph
            for event in app_graph.stream(inputs):
                for node, output in event.items():
                    # This is a simple way to know which node just finished
                    print(f"--- Stream Event: {node} ---")
                    
                    if node == "expand_queries" and output.get("sub_queries"):
                        yield f"data: {json.dumps({'type': 'log', 'content': '‚úÖ Expanded topic into search queries.'})}\n\n"
                        yield f"data: {json.dumps({'type': 'queries', 'content': output['sub_queries']})}\n\n"
                    
                    elif node == "web_search" and output.get("search_results"):
                        num_results = len(output['search_results'])
                        yield f"data: {json.dumps({'type': 'log', 'content': f'‚úÖ Web search complete. Found {num_results} unique sources.'})}\n\n"
                        # We won't stream all content, just a confirmation

                    elif node == "plan_content" and output.get("slide_plan"):
                        yield f"data: {json.dumps({'type': 'log', 'content': '‚úÖ Presentation plan created.'})}\n\n"
                        # Send the actual slide titles to the frontend
                        plan_data = output['slide_plan'].dict()
                        yield f"data: {json.dumps({'type': 'plan', 'content': plan_data})}\n\n"
                        
                    elif node == "summarize_results":
                        yield f"data: {json.dumps({'type': 'log', 'content': 'üìö Summarizing and structuring content...'})}\n\n"

                    elif node == "generate_slide_content":
                        yield f"data: {json.dumps({'type': 'log', 'content': '‚úçÔ∏è Generating content for each slide...'})}\n\n"

                    elif node == "create_presentation" and output.get("presentation_path"):
                        final_path = output["presentation_path"]
                        yield f"data: {json.dumps({'type': 'log', 'content': 'üé® Creating PowerPoint file...'})}\n\n"

                await asyncio.sleep(0.1) 

            # Once the loop is done, send the final status with the file path
            if final_path:
                file_name = os.path.basename(final_path)
                yield f"data: {json.dumps({'type': 'done', 'path': file_name})}\n\n"

        except Exception as e:
            print(f"Error during generation: {e}")
            yield f"data: {json.dumps({'type': 'error', 'content': str(e)})}\n\n"

    return StreamingResponse(stream_generator(), media_type="text/event-stream")

@app.get("/download/{filename}", tags=["Presentation"])
async def download_presentation(filename: str):
    """
    Serves the generated presentation file for download.
    """
    
    safe_filename = os.path.basename(filename)
    path = os.path.join("outputs", safe_filename)
    
    if os.path.exists(path):
        return FileResponse(
            path=path, 
            filename=safe_filename, 
            media_type='application/vnd.openxmlformats-officedocument.presentationml.presentation'
        )
    else:
        raise HTTPException(status_code=404, detail="File not found.")


@app.get("/", tags=["Status"])
async def root():
    return {"status": "ok", "message": "Welcome to the Auto Slide Deck Generator!"}

@app.get("/health", tags=["Status"])
async def health_check():
    return {"status": "healthy", "message": "Backend is running successfully"}